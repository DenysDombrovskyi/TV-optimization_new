import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó ---

def validate_excel_file(df_standard):
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    return True

def heuristic_split(group_df):
    """
    –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª:
    - –í—Å—ñ –∫–∞–Ω–∞–ª–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è.
    - –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–ª—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.
    - –ù–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫–∞–Ω–∞–ª–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –º—ñ–Ω—ñ–º—É–º.
    - –†–µ—à—Ç–∞ —Å–ª–æ—Ç—ñ–≤ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î—Ç—å—Å—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ TRP.
    """
    min_slots = np.floor(group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * (1 - group_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è']/100)).astype(int).to_numpy()
    max_slots = np.ceil(group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * (1 + group_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è']/100)).astype(int).to_numpy()
    std_slots = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'].to_numpy(dtype=int)
    
    slots = min_slots.copy()  # –ü–æ—á–∞—Ç–∫–æ–≤–æ –≤—Å—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏
    trp_values = group_df['TRP'].to_numpy()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫–∞–Ω–∞–ª–∏ (–≤–µ—Ä—Ö–Ω—ñ 75% –ø–æ TRP)
    threshold = np.percentile(trp_values, 25)
    eff_idx = np.where(trp_values > threshold)[0]
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤
    total_std = std_slots.sum()
    allocated = slots.sum()
    remaining = total_std - allocated
    
    # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –∑–∞–ª–∏—à–æ–∫ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ TRP –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
    if remaining > 0 and len(eff_idx) > 0:
        eff_trp = trp_values[eff_idx]
        for _ in range(remaining):
            idx = eff_idx[np.argmax(eff_trp / (slots[eff_idx] + 1e-6))]
            if slots[idx] < max_slots[idx]:
                slots[idx] += 1
    
    return pd.Series(slots, index=group_df.index)

def run_heuristic_optimization(df, goal, buying_audiences, deviation_df):
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['TRP'] = df.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    
    total_trp_for_aff = df['TRP'].sum()
    df['Aff'] = (df['TRP'] / total_trp_for_aff) * 100 if total_trp_for_aff > 0 else 0
    
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff'] = df['Aff']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] = df['TRP']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] = 1
    
    df = df.merge(deviation_df, on='–ö–∞–Ω–∞–ª', how='left').fillna(0)
    
    all_results = pd.DataFrame()
    
    for sh, group_df in df.groupby('–°–•'):
        slots = heuristic_split(group_df)
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = slots * group_df['TRP']
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = slots * group_df['Aff']
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = slots * group_df['–¶—ñ–Ω–∞']
        group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * group_df['–¶—ñ–Ω–∞']
        all_results = pd.concat([all_results, group_df])
    
    return all_results

# --- Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
        if not validate_excel_file(df):
            st.stop()
        st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        st.stop()
    
    all_sh = df['–°–•'].unique()
    all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in df.columns if '–¶—ñ–Ω–∞_' in col]
    
    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    goal = st.selectbox("–ú–µ—Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['Aff', 'TRP'])
    
    st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
    buying_audiences = {}
    for sh in all_sh:
        ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
        buying_audiences[sh] = ba
    
    st.subheader("üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
    channels_20_percent = ['–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2', '–°–¢–ë', '1+1 –£–∫—Ä–∞—ó–Ω–∞', 'TET', '2+2', '–ù–¢–ù']
    deviation_df = df[['–ö–∞–Ω–∞–ª']].copy()
    deviation_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(lambda x: 20.0 if x in channels_20_percent else 30.0)
    deviation_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(lambda x: 20.0 if x in channels_20_percent else 30.0)
    edited_deviation_df = st.data_editor(deviation_df, num_rows="dynamic")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
        all_results = run_heuristic_optimization(df.copy(), goal, buying_audiences, edited_deviation_df)
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ –°–•")
        for sh in all_results['–°–•'].unique():
            st.markdown(f"##### –°–•: {sh}")
            sh_df = all_results[all_results['–°–•']==sh].copy()
            sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP'] = (sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']/sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum())*100
            sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP'] = (sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP']/sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum())*100
            sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É'] = (sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç']/sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum())*100
            sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É'] = (sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç']/sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum())*100
            st.dataframe(sh_df[['–ö–∞–Ω–∞–ª','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff',
                                '–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏','–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP','–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff',
                                '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP','–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP',
                                '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É','–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É']].set_index('–ö–∞–Ω–∞–ª'))
        
        st.subheader("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–ø–ª—ñ—Ç—ñ–≤")
        for sh in all_results['–°–•'].unique():
            sh_df = all_results[all_results['–°–•']==sh]
            fig, ax = plt.subplots(figsize=(10,5))
            width = 0.35
            x = np.arange(len(sh_df))
            ax.bar(x - width/2, sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'], width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π', color='gray')
            ax.bar(x + width/2, sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'], width, label='–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π', color='skyblue')
            ax.set_xticks(x)
            ax.set_xticklabels(sh_df['–ö–∞–Ω–∞–ª'], rotation=45, ha='right')
            ax.set_ylabel('–ë—é–¥–∂–µ—Ç')
            ax.set_title(f"–°–•: {sh} ‚Äî –†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
            ax.legend()
            ax.grid(axis='y')
            st.pyplot(fig)
        
        # --- –ï–∫—Å–ø–æ—Ä—Ç —É Excel ---
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            all_results.to_excel(writer, sheet_name='–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç', index=False)
        st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(),
                           file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
