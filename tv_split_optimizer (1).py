import streamlit as st
import pandas as pd
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import io
import numpy as np

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó ---

def validate_excel_file(df_standard):
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    return True

def run_optimization(df, goal, mode, buying_audiences, deviation_df):
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['TRP'] = df.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    
    total_trp_for_aff = df['TRP'].sum()
    df['Aff'] = (df['TRP'] / total_trp_for_aff) * 100 if total_trp_for_aff > 0 else 0
    
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff'] = df['Aff']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] = df['TRP']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] = 1
    
    df = df.merge(deviation_df, on='–ö–∞–Ω–∞–ª', how='left').fillna(0)
    
    all_results = pd.DataFrame()
    
    if mode == 'per_sh':
        with st.spinner('–ü—Ä–æ–≤–æ–¥–∏–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –∑–∞ –∫–æ–∂–Ω–∏–º –°–•...'):
            for sales_house, group_df in df.groupby('–°–•'):
                group_standard_trp = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum()
                if group_standard_trp == 0:
                    st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –°–• {sales_house}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
                    continue
                
                c = group_df['–¶—ñ–Ω–∞'].values
                
                # –û–±–º–µ–∂–µ–Ω–Ω—è –ø–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è—Ö –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
                A_channel_ub = np.diag(group_df['TRP'].values)
                b_channel_ub = (1 + group_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100) * group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']
                
                A_channel_lb = -np.diag(group_df['TRP'].values)
                b_channel_lb = -(1 - group_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100) * group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']
                
                # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                A_goal = -group_df[goal].values.reshape(1, -1)
                b_goal = -np.array([group_df[f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π {goal}'].sum()])

                A = np.vstack((A_channel_ub, A_channel_lb, A_goal))
                b = np.concatenate((b_channel_ub, b_channel_lb, b_goal))
                
                bounds = [(1, None) for _ in range(len(group_df))]

                result = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='highs')
                
                if result.success:
                    slots = result.x.round(0).astype(int)
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = slots * group_df['TRP']
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = slots * group_df['Aff']
                    all_results = pd.concat([all_results, group_df])
                else:
                    st.warning(f"‚ö†Ô∏è –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è –°–• {sales_house} –Ω–µ –∑–º–æ–≥–ª–∞ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç.")
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏']
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff']
                    all_results = pd.concat([all_results, group_df])
                    
    else:  # mode == 'total'
        with st.spinner('–ü—Ä–æ–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é...'):
            c = df['–¶—ñ–Ω–∞'].values

            A_channel_ub = np.diag(df['TRP'].values)
            b_channel_ub = (1 + df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100) * df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']
            
            A_channel_lb = -np.diag(df['TRP'].values)
            b_channel_lb = -(1 - df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100) * df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']

            A_goal = -df[goal].values.reshape(1, -1)
            b_goal = -np.array([df[f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π {goal}'].sum()])

            A = np.vstack((A_channel_ub, A_channel_lb, A_goal))
            b = np.concatenate((b_channel_ub, b_channel_lb, b_goal))
            
            bounds = [(1, None) for _ in range(len(df))]
            result = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='highs')
            
            if result.success:
                slots = result.x.round(0).astype(int)
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = slots * df['TRP']
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = slots * df['Aff']
                all_results = df
            else:
                st.warning("‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –∑–º–æ–≥–ª–∞ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç.")
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏']
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff']
                all_results = df
    
    return all_results

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ Streamlit ---

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        with st.spinner('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...'):
            standard_df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
            
            if not validate_excel_file(standard_df):
                st.stop()
            
            st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            all_data = standard_df.copy()
            
    except Exception as e:
        st.error(f"‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    else:
        all_sh = all_data['–°–•'].unique()
        all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in all_data.columns if '–¶—ñ–Ω–∞_' in col]
        
        st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        goal = st.selectbox("–ú–µ—Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['Aff', 'TRP'])
        mode = st.selectbox("–†–µ–∂–∏–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['total', 'per_sh'])
        
        st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
        buying_audiences = {}
        for sh in all_sh:
            ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
            buying_audiences[sh] = ba
        
        st.subheader("üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
        channels_20_percent = ['–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2', '–°–¢–ë', '1+1 –£–∫—Ä–∞—ó–Ω–∞', 'TET', '2+2', '–ù–¢–ù']
        deviation_df = all_data[['–ö–∞–Ω–∞–ª']].copy()
        
        def set_default_deviation(channel):
            return 20.0 if channel in channels_20_percent else 30.0

        deviation_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(set_default_deviation)
        deviation_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(set_default_deviation)
        edited_deviation_df = st.data_editor(deviation_df, num_rows="dynamic")
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
            all_results = run_optimization(all_data.copy(), goal, mode, buying_audiences, edited_deviation_df)
            
            if not all_results.empty:
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['–¶—ñ–Ω–∞']
                all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['–¶—ñ–Ω–∞']

                # --- –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ ---
                total_budget_opt = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
                total_budget_std = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
                
                total_trp_opt = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum()
                total_aff_opt = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'].sum()
                
                total_trp_std = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum()
                total_aff_std = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff'].sum()
                
                cpp_opt = total_budget_opt / total_trp_opt if total_trp_opt > 0 else 0
                cpp_std = total_budget_std / total_trp_std if total_trp_std > 0 else 0
                cpt_opt = total_budget_opt / total_aff_opt if total_aff_opt > 0 else 0
                cpt_std = total_budget_std / total_aff_std if total_aff_std > 0 else 0
                
                if total_budget_opt == total_budget_std:
                    st.info("‚ÑπÔ∏è –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π—à–ª–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å.")
                else:
                    st.success(f"‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ï–∫–æ–Ω–æ–º—ñ—è –±—é–¥–∂–µ—Ç—É: {(total_budget_std - total_budget_opt):,.2f} –≥—Ä–Ω")
                
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
                tab1, tab2, tab3, tab4 = st.tabs(["–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏", "–î–µ—Ç–∞–ª—ñ –ø–æ –°–•", "–ì—Ä–∞—Ñ—ñ–∫–∏", "–°–ø–ª—ñ—Ç –ø–æ –°–•"])

                # --- –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ ---
                with tab1:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.info("**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç**")
                        st.metric("–¶—ñ–Ω–∞ –∑–∞ Aff", f"{cpt_std:,.2f} –≥—Ä–Ω")
                        st.metric("–¶—ñ–Ω–∞ –∑–∞ TRP", f"{cpp_std:,.2f} –≥—Ä–Ω")
                        st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", f"{total_budget_std:,.2f} –≥—Ä–Ω")
                    with col2:
                        st.success("**–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç**")
                        st.metric("–¶—ñ–Ω–∞ –∑–∞ Aff", f"{cpt_opt:,.2f} –≥—Ä–Ω")
                        st.metric("–¶—ñ–Ω–∞ –∑–∞ TRP", f"{cpp_opt:,.2f} –≥—Ä–Ω")
                        st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", f"{total_budget_opt:,.2f} –≥—Ä–Ω")

                # --- –ì—Ä–∞—Ñ—ñ–∫–∏ ---
                with tab3:
                    if not all_results.empty:
                        labels = all_results['–ö–∞–Ω–∞–ª'].tolist()
                        x = range(len(labels))
                        width = 0.35
                        
                        fig_budget_share, ax_budget_share = plt.subplots(figsize=(12,6))
                        std_share = (all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                        opt_share = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                        ax_budget_share.bar(x, std_share, width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç', color='gray')
                        ax_budget_share.bar([p + width for p in x], opt_share, width, label='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', color='skyblue')
                        ax_budget_share.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É (%)')
                        ax_budget_share.set_ylabel('–ß–∞—Å—Ç–∫–∞ (%)')
                        ax_budget_share.set_xticks([p + width/2 for p in x])
                        ax_budget_share.set_xticklabels(labels, rotation=45, ha="right")
                        ax_budget_share.legend()
                        ax_budget_share.grid(axis='y')
                        plt.tight_layout()
                        st.pyplot(fig_budget_share)

                # --- –°–ø–ª—ñ—Ç –ø–æ –°–• ---
                with tab4:
                    st.markdown("#### –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –ø–æ –∫–æ–∂–Ω–æ–º—É –°–•")
                    for sh in all_results['–°–•'].unique():
                        st.markdown(f"##### –°–•: {sh}")
                        sh_df = all_results[all_results['–°–•']==sh].copy()
                        sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP'] = (sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] / sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum())*100
                        sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP'] = (sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] / sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum())*100
                        sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É'] = (sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum())*100
                        sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É'] = (sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum())*100
                        st.dataframe(sh_df[['–ö–∞–Ω–∞–ª','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff',
                                            '–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏','–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP','–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff',
                                            '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP','–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP',
                                            '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É','–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É']].set_index('–ö–∞–Ω–∞–ª'))
