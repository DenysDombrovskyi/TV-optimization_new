import streamlit as st
import pandas as pd
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import io

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó ---

def validate_excel_file(df_standard, df_aff):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ –≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞—Ö.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, —ñ–Ω–∞–∫—à–µ - False.
    """
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    required_cols_aff = ['–ö–∞–Ω–∞–ª', 'Aff']

    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å '{col}'.")
            return False
            
    for col in required_cols_aff:
        if col not in df_aff.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å '{col}'.")
            return False
    
    return True

def run_optimization(df, total_budget, goal, mode, buying_audiences):
    """
    –í–∏–∫–æ–Ω—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¢–í-—Å–ø–ª—ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö —ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.
    """
    # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –∑ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ TRP –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –ë–ê
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['TRP'] = df.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–æ–∫, —è–∫–∏–π —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–≤ –∫–∞–Ω–∞–ª–∏ –∑ –Ω—É–ª—å–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    # –¢–µ–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏.

    all_results = pd.DataFrame()

    if mode == 'per_sh':
        with st.spinner('–ü—Ä–æ–≤–æ–¥–∏–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –∑–∞ –∫–æ–∂–Ω–∏–º –°–•...'):
            total_standard_budget = (df['TRP'] * df['–¶—ñ–Ω–∞']).sum()
            for sales_house, group_df in df.groupby('–°–•'):
                group_standard_budget = (group_df['TRP'] * group_df['–¶—ñ–Ω–∞']).sum()
                if total_standard_budget == 0:
                    st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –°–• {sales_house}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
                    continue
                group_budget = (group_standard_budget / total_standard_budget) * total_budget
                
                group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = group_df['TRP'] * group_df['–¶—ñ–Ω–∞']
                group_df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                
                # –õ–æ–≥—ñ–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
                group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = group_df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'].apply(lambda x: 0.2 if x >= 10 else 0.3)
                
                group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
                group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
                
                # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è linprog
                c = -group_df[goal].values
                A_ub = [group_df['–¶—ñ–Ω–∞'].values]
                b_ub = [group_budget]
                A_lower = -pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['–¶—ñ–Ω–∞'], axis=0).values
                b_lower = -group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values
                A_upper = pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['–¶—ñ–Ω–∞'], axis=0).values
                b_upper = group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values
                A = A_ub + list(A_lower) + list(A_upper)
                b = b_ub + list(b_lower) + list(b_upper)
                
                result = linprog(c, A_ub=A, b_ub=b, bounds=(0, None))
                
                if result.success:
                    slots = result.x.round(0).astype(int)
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = slots * group_df['–¶—ñ–Ω–∞']
                    all_results = pd.concat([all_results, group_df])
                else:
                    st.warning(f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è –°–• {sales_house} –Ω–µ –≤–¥–∞–ª–∞—Å—è: {result.message}")
                    
    else:  # mode == 'total'
        with st.spinner('–ü—Ä–æ–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é...'):
            df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = df['TRP'] * df['–¶—ñ–Ω–∞']
            total_standard_budget = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
            df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_standard_budget) * 100
            
            # –õ–æ–≥—ñ–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
            df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'].apply(lambda x: 0.2 if x >= 10 else 0.3)
            
            df['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
            df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
            
            # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è linprog
            c = -df[goal].values
            A_ub = [df['–¶—ñ–Ω–∞'].values]
            b_ub = [total_budget]
            A_lower = -pd.get_dummies(df['–ö–∞–Ω–∞–ª']).mul(df['–¶—ñ–Ω–∞'], axis=0).values
            b_lower = -df['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values
            A_upper = pd.get_dummies(df['–ö–∞–Ω–∞–ª']).mul(df['–¶—ñ–Ω–∞'], axis=0).values
            b_upper = df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values
            A = A_ub + list(A_lower) + list(A_upper)
            b = b_ub + list(b_lower) + list(b_upper)

            result = linprog(c, A_ub=A, b_ub=b, bounds=(0, None))
            
            if result.success:
                slots = result.x.round(0).astype(int)
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = slots * df['–¶—ñ–Ω–∞']
                all_results = df
            else:
                st.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {result.message}")
    
    return all_results

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ Streamlit ---

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        with st.spinner('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...'):
            standard_df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=1, engine="openpyxl")
            aff_df = pd.read_excel(uploaded_file, sheet_name="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)", skiprows=7, engine="openpyxl")
            aff_df = aff_df.iloc[:, [0, 1]].copy()
            aff_df.columns = ['–ö–∞–Ω–∞–ª', 'Aff']
            
            if not validate_excel_file(standard_df, aff_df):
                st.stop()

            all_data = pd.merge(standard_df, aff_df, on='–ö–∞–Ω–∞–ª', how='inner')
            
            st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            
    except FileNotFoundError:
        st.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∞—Ä–∫—É—à—ñ –≤ —Ñ–∞–π–ª—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' —Ç–∞ '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)'.")
    except KeyError as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å: {e}.")
    except Exception as e:
        st.error(f"‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    else:
        all_sh = all_data['–°–•'].unique()
        all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in all_data.columns if '–¶—ñ–Ω–∞_' in col]

        st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        total_budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç (–≥—Ä–Ω)", min_value=1000, value=500000, step=1000)
        goal = st.selectbox("–ú–µ—Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['Aff', 'TRP'])
        mode = st.selectbox("–†–µ–∂–∏–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['total', 'per_sh'])
        
        st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
        buying_audiences = {}
        for sh in all_sh:
            ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
            buying_audiences[sh] = ba

        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
            all_results = run_optimization(all_data.copy(), total_budget, goal, mode, buying_audiences)
            
            if not all_results.empty:
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
                total_trp = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP']).sum()
                total_budget_opt = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
                
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
                st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π TRP (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π)", f"{total_trp:,.2f}")
                st.metric("–í–∏—Ç—Ä–∞—á–µ–Ω–∏–π –±—é–¥–∂–µ—Ç", f"{total_budget_opt:,.2f} –≥—Ä–Ω")

                all_results['TRP_–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π_—Å–ø–ª—ñ—Ç (%)'] = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP'] / total_trp) * 100
                st.dataframe(all_results[['–ö–∞–Ω–∞–ª', '–°–•', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', 'TRP_–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π_—Å–ø–ª—ñ—Ç (%)']])

                # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                fig, axes = plt.subplots(1, 2, figsize=(18, 8))
                labels = all_results['–ö–∞–Ω–∞–ª']
                
                if '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç' in all_results.columns:
                    std_share = (all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                    opt_share = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                    x = range(len(labels))
                    width = 0.35
                    axes[0].bar(x, std_share, width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç', color='gray')
                    axes[0].bar([p + width for p in x], opt_share, width, label='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', color='skyblue')
                    axes[0].set_title('–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)')
                    axes[0].set_xticks([p + width / 2 for p in x])
                    axes[0].set_xticklabels(labels, rotation=45, ha="right")
                    axes[0].legend()
                    axes[0].grid(axis='y')

                axes[1].bar(labels, all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'], color='skyblue')
                axes[1].set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤')
                axes[1].set_xticklabels(labels, rotation=45, ha="right")
                axes[1].grid(axis='y')
                
                plt.tight_layout()
                st.pyplot(fig)

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                output = io.BytesIO()
                all_results.to_excel(output, index=False, engine='openpyxl')
                st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(), file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
