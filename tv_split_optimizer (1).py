import streamlit as st
import pandas as pd
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import io

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó ---

def validate_excel_file(df_standard, df_aff):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ –≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞—Ö.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, —ñ–Ω–∞–∫—à–µ - False.
    """
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    required_cols_aff = ['–ö–∞–Ω–∞–ª', 'Aff']

    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
            
    for col in required_cols_aff:
        if col not in df_aff.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    
    return True

def run_optimization(df, goal, mode, buying_audiences, deviation_df):
    """
    –í–∏–∫–æ–Ω—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¢–í-—Å–ø–ª—ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö —ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.
    """
    # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –∑ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ TRP –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –ë–ê
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['TRP'] = df.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff'] = df['Aff']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] = df['TRP']
    
    # –û–±'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å
    df = df.merge(deviation_df, on='–ö–∞–Ω–∞–ª', how='left').fillna(0)
    
    all_results = pd.DataFrame()
    
    if mode == 'per_sh':
        with st.spinner('–ü—Ä–æ–≤–æ–¥–∏–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –∑–∞ –∫–æ–∂–Ω–∏–º –°–•...'):
            for sales_house, group_df in df.groupby('–°–•'):
                group_standard_trp = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum()
                if group_standard_trp == 0:
                    st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –°–• {sales_house}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
                    continue
                
                group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ–ª—è TRP'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] / group_standard_trp
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
                group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞ TRP'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ–ª—è TRP'] * (1 - group_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100)
                group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ TRP'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ–ª—è TRP'] * (1 + group_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100)
                
                # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è linprog
                c = -group_df[goal].values
                A_upper = pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['TRP'], axis=0).values
                b_upper = group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ TRP'].values * group_standard_trp
                b_lower = group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞ TRP'].values * group_standard_trp
                
                A_lower = -A_upper
                b_lower = -b_lower
                
                A = list(A_upper) + list(A_lower)
                b = list(b_upper) + list(b_lower)
                
                # –ö–æ–∂–µ–Ω –∫–∞–Ω–∞–ª –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ö–æ—á–∞ –± 1 —Å–ª–æ—Ç
                bounds = [(1, None) for _ in range(len(group_df))]

                result = linprog(c, A_ub=A, b_ub=b, bounds=bounds)
                
                if result.success:
                    slots = result.x.round(0).astype(int)
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = slots * group_df['TRP']
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = slots * group_df['Aff']
                    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (%)'] = (group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] / group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum()) * 100
                    all_results = pd.concat([all_results, group_df])
                else:
                    st.warning(f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è –°–• {sales_house} –Ω–µ –≤–¥–∞–ª–∞—Å—è: {result.message}")
                    
    else:  # mode == 'total'
        with st.spinner('–ü—Ä–æ–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é...'):
            total_standard_trp = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum()
            df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ–ª—è TRP'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] / total_standard_trp
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
            df['–ù–∏–∂–Ω—è –º–µ–∂–∞ TRP'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ–ª—è TRP'] * (1 - df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100)
            df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ TRP'] = df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ–ª—è TRP'] * (1 + df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] / 100)

            # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è linprog
            c = -df[goal].values
            A_upper = pd.get_dummies(df['–ö–∞–Ω–∞–ª']).mul(df['TRP'], axis=0).values
            b_upper = df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ TRP'].values * total_standard_trp
            b_lower = df['–ù–∏–∂–Ω—è –º–µ–∂–∞ TRP'].values * total_standard_trp
            
            A_lower = -A_upper
            b_lower = -b_lower

            A = list(A_upper) + list(A_lower)
            b = list(b_upper) + list(b_lower)

            bounds = [(1, None) for _ in range(len(df))]
            result = linprog(c, A_ub=A, b_ub=b, bounds=bounds)
            
            if result.success:
                slots = result.x.round(0).astype(int)
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = slots * df['TRP']
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = slots * df['Aff']
                df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (%)'] = (df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] / df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum()) * 100
                all_results = df
            else:
                st.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {result.message}")
    
    return all_results

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ Streamlit ---

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

# –£–º–æ–≤–Ω–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
total_budget_assumption = 1_000_000

if uploaded_file:
    try:
        with st.spinner('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...'):
            standard_df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
            aff_df = pd.read_excel(uploaded_file, sheet_name="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)", skiprows=7, engine="openpyxl")
            aff_df = aff_df.iloc[:, [0, 1]].copy()
            aff_df.columns = ['–ö–∞–Ω–∞–ª', 'Aff']
            
            if not validate_excel_file(standard_df, aff_df):
                st.stop()

            all_data = pd.merge(standard_df, aff_df, on='–ö–∞–Ω–∞–ª', how='inner')
            
            st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            
    except FileNotFoundError:
        st.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∞—Ä–∫—É—à—ñ –≤ —Ñ–∞–π–ª—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' —Ç–∞ '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)'.")
    except KeyError as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å: {e}.")
    except Exception as e:
        st.error(f"‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    else:
        all_sh = all_data['–°–•'].unique()
        all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in all_data.columns if '–¶—ñ–Ω–∞_' in col]

        st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        st.info(f"–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —É–º–æ–≤–Ω–∏–π –±—é–¥–∂–µ—Ç **{total_budget_assumption:,} –≥—Ä–Ω**.")
        goal = st.selectbox("–ú–µ—Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['Aff', 'TRP'])
        mode = st.selectbox("–†–µ–∂–∏–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['total', 'per_sh'])
        
        st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
        buying_audiences = {}
        for sh in all_sh:
            ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
            buying_audiences[sh] = ba
        
        st.subheader("üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
        
        channels_20_percent = ['–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2', '–°–¢–ë', '1+1 –£–∫—Ä–∞—ó–Ω–∞', 'TET', '2+2', '–ù–¢–ù']

        deviation_df = all_data[['–ö–∞–Ω–∞–ª']].copy()
        
        def set_default_deviation(channel):
            if channel in channels_20_percent:
                return 20.0
            return 30.0

        deviation_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(set_default_deviation)
        deviation_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(set_default_deviation)
        
        edited_deviation_df = st.data_editor(deviation_df, num_rows="dynamic")
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
            all_results = run_optimization(all_data.copy(), goal, mode, buying_audiences, edited_deviation_df)
            
            if not all_results.empty:
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±—é–¥–∂–µ—Ç—ñ–≤
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['–¶—ñ–Ω–∞']
                all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] * all_results['–¶—ñ–Ω–∞']
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —É–º–æ–≤–Ω–∏–π –±—é–¥–∂–µ—Ç
                total_budget_opt_raw = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
                total_budget_std = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
                
                # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è, —â–æ–± –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –¥–æ—Ä—ñ–≤–Ω—é–≤–∞–≤ —É–º–æ–≤–Ω–æ–º—É
                if total_budget_opt_raw > 0:
                    scale_factor = total_budget_assumption / total_budget_opt_raw
                    total_trp_opt_scaled = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum() * scale_factor
                    total_aff_opt_scaled = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'].sum() * scale_factor
                else:
                    st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ. –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –¥–æ—Ä—ñ–≤–Ω—é—î 0.")
                    st.stop()
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞
                total_trp_std = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum()
                total_aff_std = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff'].sum()
                
                cpt_opt = total_budget_assumption / total_aff_opt_scaled if total_aff_opt_scaled > 0 else 0
                cpp_opt = total_budget_assumption / total_trp_opt_scaled if total_trp_opt_scaled > 0 else 0
                cpt_std = total_budget_std / total_aff_std if total_aff_std > 0 else 0
                cpp_std = total_budget_std / total_trp_std if total_trp_std > 0 else 0

                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
                
                st.markdown("#### –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ —É–º–æ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É)")
                col1, col2 = st.columns(2)
                with col1:
                    st.info("**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç**")
                    st.metric("–¶—ñ–Ω–∞ –∑–∞ Aff", f"{cpt_std:,.2f} –≥—Ä–Ω")
                    st.metric("–¶—ñ–Ω–∞ –∑–∞ TRP", f"{cpp_std:,.2f} –≥—Ä–Ω")
                with col2:
                    st.success("**–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç**")
                    st.metric("–¶—ñ–Ω–∞ –∑–∞ Aff", f"{cpt_opt:,.2f} –≥—Ä–Ω")
                    st.metric("–¶—ñ–Ω–∞ –∑–∞ TRP", f"{cpp_opt:,.2f} –≥—Ä–Ω")

                st.markdown("---")
                st.subheader("–î–µ—Ç–∞–ª—ñ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞ (–º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ)")
                st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ)", f"{total_trp_opt_scaled:,.2f}")
                st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π Aff (–º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ)", f"{total_aff_opt_scaled:,.2f}")
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ (–º–∞—Å—à—Ç–∞–±)'] = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * scale_factor).round(0).astype(int)
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç (–º–∞—Å—à—Ç–∞–±)'] = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ (–º–∞—Å—à—Ç–∞–±)'] * all_results['–¶—ñ–Ω–∞']
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±)'] = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ (–º–∞—Å—à—Ç–∞–±)'] * all_results['TRP']
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff (–º–∞—Å—à—Ç–∞–±)'] = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ (–º–∞—Å—à—Ç–∞–±)'] * all_results['Aff']
                all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (%)'] = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±)'] / all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±)'].sum()) * 100
                
                st.dataframe(all_results[['–ö–∞–Ω–∞–ª', '–°–•', '–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ (–º–∞—Å—à—Ç–∞–±)', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±)', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff (–º–∞—Å—à—Ç–∞–±)', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (%)']])

                # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                fig, axes = plt.subplots(1, 2, figsize=(18, 8))
                labels = all_results['–ö–∞–Ω–∞–ª']
                
                if '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP' in all_results.columns:
                    std_share = (all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] / all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum()) * 100
                    opt_share = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±)'] / all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP (–º–∞—Å—à—Ç–∞–±)'].sum()) * 100
                    x = range(len(labels))
                    width = 0.35
                    axes[0].bar(x, std_share, width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç', color='gray')
                    axes[0].bar([p + width for p in x], opt_share, width, label='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', color='skyblue')
                    axes[0].set_title('–ß–∞—Å—Ç–∫–∞ TRP (%)')
                    axes[0].set_xticks([p + width / 2 for p in x])
                    axes[0].set_xticklabels(labels, rotation=45, ha="right")
                    axes[0].legend()
                    axes[0].grid(axis='y')

                axes[1].bar(labels, all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ (–º–∞—Å—à—Ç–∞–±)'], color='skyblue')
                axes[1].set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤')
                axes[1].set_xticklabels(labels, rotation=45, ha="right")
                axes[1].grid(axis='y')
                
                plt.tight_layout()
                st.pyplot(fig)

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                output = io.BytesIO()
                all_results.to_excel(output, index=False, engine='openpyxl')
                st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(), file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
