import streamlit as st
import pandas as pd
import numpy as np
import io
from scipy.optimize import linprog
import matplotlib.pyplot as plt

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó ---

def validate_excel_file(df_standard):
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    return True

def hybrid_optimization(df, goal, buying_audiences, deviation_df, use_linprog_threshold=20):
    """
    –ì—ñ–±—Ä–∏–¥–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞:
    - –î–ª—è –≥—Ä—É–ø –∑ –º–µ–Ω—à–µ use_linprog_threshold –∫–∞–Ω–∞–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ linprog.
    - –î–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä—É–ø ‚Äî –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª —Å–ª–æ—Ç—ñ–≤ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
    """
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['TRP'] = df.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    
    total_trp_for_aff = df['TRP'].sum()
    df['Aff'] = (df['TRP'] / total_trp_for_aff) * 100 if total_trp_for_aff > 0 else 0
    
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff'] = df['Aff']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'] = df['TRP']
    df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] = 1
    
    df = df.merge(deviation_df, on='–ö–∞–Ω–∞–ª', how='left').fillna(0)
    
    all_results = pd.DataFrame()
    
    for sh, group_df in df.groupby('–°–•'):
        n_channels = len(group_df)
        
        # –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ –º—ñ–Ω/–º–∞–∫—Å —Å–ª–æ—Ç–∏ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω—å
        min_slots = np.floor(group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * (1 - group_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è']/100)).astype(int)
        max_slots = np.ceil(group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * (1 + group_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è']/100)).astype(int)
        
        if n_channels <= use_linprog_threshold:
            # --- Linprog –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è ---
            c = group_df['–¶—ñ–Ω–∞'].values
            A_ub = np.diag(group_df['TRP'].values)
            b_ub = max_slots * group_df['TRP']
            A_lb = -np.diag(group_df['TRP'].values)
            b_lb = -min_slots * group_df['TRP']
            A = np.vstack((A_ub, A_lb, -group_df[goal].values.reshape(1,-1)))
            b = np.concatenate((b_ub, b_lb, [-group_df[f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π {goal}'].sum()]))
            bounds = [(1, None) for _ in range(n_channels)]
            result = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='highs')
            
            if result.success:
                slots = result.x.round(0).astype(int)
            else:
                # –Ø–∫—â–æ linprog –Ω–µ –ø—Ä–∞—Ü—é—î ‚Äî –µ–≤—Ä–∏—Å—Ç–∏–∫–∞
                slots = np.clip(np.round(group_df['TRP']/group_df['TRP'].sum()*n_channels), min_slots, max_slots)
        else:
            # --- –ï–≤—Ä–∏—Å—Ç–∏–∫–∞ ---
            total_slots = n_channels  # –ø–æ—á–∞—Ç–∫–æ–≤–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ = –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–Ω–∞–ª—ñ–≤
            slots = np.round(group_df['TRP']/group_df['TRP'].sum()*total_slots).astype(int)
            slots = np.clip(slots, min_slots, max_slots)
        
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'] = slots * group_df['TRP']
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff'] = slots * group_df['Aff']
        all_results = pd.concat([all_results, group_df])
    
    all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['–¶—ñ–Ω–∞']
    all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['–¶—ñ–Ω–∞']
    
    return all_results

# --- Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
        if not validate_excel_file(df):
            st.stop()
        st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        st.stop()
    
    all_sh = df['–°–•'].unique()
    all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in df.columns if '–¶—ñ–Ω–∞_' in col]
    
    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    goal = st.selectbox("–ú–µ—Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['Aff', 'TRP'])
    
    st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
    buying_audiences = {}
    for sh in all_sh:
        ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
        buying_audiences[sh] = ba
    
    st.subheader("üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
    channels_20_percent = ['–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2', '–°–¢–ë', '1+1 –£–∫—Ä–∞—ó–Ω–∞', 'TET', '2+2', '–ù–¢–ù']
    deviation_df = df[['–ö–∞–Ω–∞–ª']].copy()
    deviation_df['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(lambda x: 20.0 if x in channels_20_percent else 30.0)
    deviation_df['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = deviation_df['–ö–∞–Ω–∞–ª'].apply(lambda x: 20.0 if x in channels_20_percent else 30.0)
    edited_deviation_df = st.data_editor(deviation_df, num_rows="dynamic")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
        all_results = hybrid_optimization(df.copy(), goal, buying_audiences, edited_deviation_df)
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ –°–•")
        for sh in all_results['–°–•'].unique():
            st.markdown(f"##### –°–•: {sh}")
            sh_df = all_results[all_results['–°–•']==sh].copy()
            sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP'] = (sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP']/sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP'].sum())*100
            sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP'] = (sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP']/sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP'].sum())*100
            sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É'] = (sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç']/sh_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum())*100
            sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É'] = (sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç']/sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum())*100
            st.dataframe(sh_df[['–ö–∞–Ω–∞–ª','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–ª–æ—Ç–∏','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TRP','–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Aff',
                                '–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏','–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π TRP','–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π Aff',
                                '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP','–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ TRP',
                                '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É','–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É']].set_index('–ö–∞–Ω–∞–ª'))
        
        # --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ Excel ---
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            all_results.to_excel(writer, sheet_name='–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç', index=False)
        st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(),
                           file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
