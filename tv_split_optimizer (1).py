import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt

# --- –§—É–Ω–∫—Ü—ñ—ó ---
def validate_excel_file(df_standard):
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    return True

def apply_budget_limits(df, min_share, max_share):
    df = df.copy()
    for idx, row in df.iterrows():
        channel = row['–ö–∞–Ω–∞–ª']
        base = row['–ë—é–¥–∂–µ—Ç_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π']
        min_val = min_share.get(channel, 0)
        max_val = max_share.get(channel, 100)
        df.at[idx, '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = np.clip(base, min_val, max_val)
    df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum() * 100
    return df

def calculate_grp_trp(df):
    df = df.copy()
    df['GRP'] = df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / df['–¶—ñ–Ω–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞']
    df['TRP'] = df['GRP'] * df['Affinity']
    return df

def highlight_top_channels(row, top_channels):
    is_top_channel = row['–ö–∞–Ω–∞–ª'] in top_channels
    style = 'font-weight: bold; background-color: #f0f0f0' if is_top_channel else ''
    return [style] * len(row)

# --- Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        # –û—Å–Ω–æ–≤–Ω–∏–π –ª–∏—Å—Ç —ñ –ª–∏—Å—Ç –∑ Affinity
        df_main = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
        df_affinity = pd.read_excel(uploaded_file, sheet_name="Affinity", engine="openpyxl")
        
        if not validate_excel_file(df_main):
            st.stop()
        st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
        
        # –ó'—î–¥–Ω—É—î–º–æ –ø–æ –ö–∞–Ω–∞–ª—É
        df = df_main.merge(df_affinity, on='–ö–∞–Ω–∞–ª', how='left')
        df['Affinity'].fillna(1.0, inplace=True)  # —è–∫—â–æ –Ω–µ–º–∞—î Affinity, —Å—Ç–∞–≤–∏–º–æ 1.0
        
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        st.stop()

    all_sh = df['–°–•'].unique()

    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
    buying_audiences = {}
    for sh in all_sh:
        ba_options = [col.replace('–¶—ñ–Ω–∞_', '') for col in df.columns if col.startswith('–¶—ñ–Ω–∞_')]
        ba = st.selectbox(f"–°–•: {sh}", ba_options, key=sh)
        buying_audiences[sh] = ba

    # –¢–æ–ø-–∫–∞–Ω–∞–ª–∏
    top_channel_groups = {
        '–û—É—à–µ–Ω': ['–°–¢–ë', '–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2'],
        'Sirius': ['1+1 –£–∫—Ä–∞—ó–Ω–∞', '–¢–ï–¢', '2+2'],
        'Space': ['–ù–¢–ù']
    }
    all_top_channels = [ch for sublist in top_channel_groups.values() for ch in sublist]

    # –ú—ñ–Ω/–º–∞–∫—Å —á–∞—Å—Ç–∫–∏
    min_share = {}
    max_share = {}
    for channel in df['–ö–∞–Ω–∞–ª'].unique():
        if channel in all_top_channels:
            min_val = 80.0
            max_val = 120.0
        else:
            min_val = 70.0
            max_val = 130.0
        min_share[channel] = min_val
        max_share[channel] = max_val

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –±—é–¥–∂–µ—Ç—É —ñ —Ü—ñ–Ω–∏
    df['–ë—é–¥–∂–µ—Ç_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π'] = df.apply(
        lambda row: row.get(f'–ë—é–¥–∂–µ—Ç_{buying_audiences.get(row["–°–•"], "")}', 
                            row.get('–ë—é–¥–∂–µ—Ç (%)', 1.0)),  # –¥–µ—Ñ–æ–ª—Ç 1.0
        axis=1
    )
    df['–¶—ñ–Ω–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞'] = df.apply(
        lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 1.0),  # –¥–µ—Ñ–æ–ª—Ç 1.0
        axis=1
    )

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
        all_results = pd.DataFrame()
        for sh in all_sh:
            df_sh = df[df['–°–•']==sh].copy()
            df_sh = apply_budget_limits(df_sh, min_share, max_share)
            df_sh = calculate_grp_trp(df_sh)
            
            # –°—É–º–∞—Ä–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É —Ç–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤ –ø–æ –°–•
            mask_top = df_sh['–ö–∞–Ω–∞–ª'].isin(all_top_channels)
            sum_top_budget = df_sh.loc[mask_top, '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
            df_sh['–°—É–º–∞—Ä–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É —Ç–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤ (%)'] = sum_top_budget
            
            all_results = pd.concat([all_results, df_sh])

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ –°–•")
        for sh in all_results['–°–•'].unique():
            st.markdown(f"##### –°–•: {sh}")
            sh_df = all_results[all_results['–°–•']==sh].copy()
            st.dataframe(
                sh_df[['–ö–∞–Ω–∞–ª', '–ë—é–¥–∂–µ—Ç_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', '–¶—ñ–Ω–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞', 'GRP', 'TRP', '–°—É–º–∞—Ä–Ω–∞ —á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É —Ç–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤ (%)']]
                .style.apply(highlight_top_channels, axis=1, top_channels=all_top_channels)
            )

            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç:** `{sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –±—é–¥–∂–µ—Ç —Ç–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤:** `{sh_df.loc[sh_df['–ö–∞–Ω–∞–ª'].isin(all_top_channels), '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")

        st.subheader("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–ø–ª—ñ—Ç—ñ–≤")
        for sh in all_results['–°–•'].unique():
            sh_df = all_results[all_results['–°–•']==sh]
            fig, ax = plt.subplots(figsize=(10,5))
            colors = ['lightgreen' if c==sh_df['–¶—ñ–Ω–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞'].min() else 'salmon' if c==sh_df['–¶—ñ–Ω–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞'].max() else 'skyblue' for c in sh_df['–¶—ñ–Ω–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞']]
            ax.bar(sh_df['–ö–∞–Ω–∞–ª'], sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'], color=colors)
            ax.set_ylabel('–ë—é–¥–∂–µ—Ç (%)')
            ax.set_title(f"–°–•: {sh} ‚Äî –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
            ax.set_xticklabels(sh_df['–ö–∞–Ω–∞–ª'], rotation=45, ha='right')
            ax.grid(axis='y')
            st.pyplot(fig)

        # --- –ï–∫—Å–ø–æ—Ä—Ç —É Excel ---
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            all_results.to_excel(writer, sheet_name='–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç', index=False)
        st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(),
                             file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
