import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt

# --- –§—É–Ω–∫—Ü—ñ—ó ---

def validate_excel_file(df_standard):
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    return True

def heuristic_split_within_group(group_df, total_group_budget, min_share, max_share):
    """
    –†–æ–∑–ø–æ–¥—ñ–ª—è—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –±—é–¥–∂–µ—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≥—Ä—É–ø–∏ –∫–∞–Ω–∞–ª—ñ–≤ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —á–∞—Å—Ç–æ–∫,
    –æ–ø—Ç–∏–º—ñ–∑—É—é—á–∏ –∑–∞ TRP.
    """
    if group_df.empty or total_group_budget == 0:
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = 0
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = 0
        return group_df

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    shares = pd.Series(0.0, index=group_df.index)
    remaining_budget = total_group_budget

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–ø–æ–¥—ñ–ª –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –æ–±–º–µ–∂–µ–Ω—å
    for idx, row in group_df.iterrows():
        min_b = min_share.get(row['–ö–∞–Ω–∞–ª'], 0) / 100 * total_group_budget
        max_b = max_share.get(row['–ö–∞–Ω–∞–ª'], 1) / 100 * total_group_budget
        alloc = min(max_b, remaining_budget)
        shares.loc[idx] = alloc
        remaining_budget -= alloc

    # –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–≤—Å—è –±—é–¥–∂–µ—Ç, —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ TRP*Affinity, –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—é—á–∏ max
    if remaining_budget > 0:
        cost_eff = row['Affinity'] / group_df['Affinity'].sum()
        additional = remaining_budget * cost_eff
        shares += additional
        shares = shares.clip(upper=[max_share.get(k, 1)/100*total_group_budget for k in group_df['–ö–∞–Ω–∞–ª']])

    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = shares
    total_sx_budget = (group_df['–¶—ñ–Ω–∞'] * group_df['TRP']).sum()
    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = (group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_sx_budget) * 100
    return group_df

def run_multi_group_optimization(df, buying_audiences, top_channel_groups, min_share, max_share):
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['Affinity'] = df.apply(lambda row: row.get(f'Affinity_{buying_audiences.get(row["–°–•"], "")}', 1.0), axis=1)
    
    # –Ø–∫—â–æ TRP –Ω–µ–º–∞—î ‚Äî —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —è–∫ —á–∞—Å—Ç–∫—É –±—é–¥–∂–µ—Ç—É –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ Affinity
    for sh in df['–°–•'].unique():
        df_sh = df[df['–°–•']==sh]
        total_price = df_sh['–¶—ñ–Ω–∞'].sum()
        df.loc[df['–°–•']==sh, 'TRP'] = (df_sh['–¶—ñ–Ω–∞']/total_price) * df_sh['Affinity']
    
    all_results = pd.DataFrame()

    for sh, group_df in df.groupby('–°–•'):
        optimized_group = pd.DataFrame()
        remaining_df_for_opt = group_df.copy()
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –¢–æ–ø-–∫–∞–Ω–∞–ª–∏
        for group_name, channels_list in top_channel_groups.items():
            df_group = remaining_df_for_opt[remaining_df_for_opt['–ö–∞–Ω–∞–ª'].isin(channels_list)].copy()
            if not df_group.empty:
                total_group_budget = (df_group['–¶—ñ–Ω–∞'] * df_group['TRP']).sum()
                results_group = heuristic_split_within_group(df_group, total_group_budget, min_share, max_share)
                optimized_group = pd.concat([optimized_group, results_group])
                remaining_df_for_opt = remaining_df_for_opt[~remaining_df_for_opt['–ö–∞–Ω–∞–ª'].isin(channels_list)]
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ—à—Ç—É –∫–∞–Ω–∞–ª—ñ–≤
        if not remaining_df_for_opt.empty:
            total_remaining_budget = (remaining_df_for_opt['–¶—ñ–Ω–∞'] * remaining_df_for_opt['TRP']).sum()
            results_remaining = heuristic_split_within_group(remaining_df_for_opt, total_remaining_budget, min_share, max_share)
            optimized_group = pd.concat([optimized_group, results_remaining])
        
        # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
        total_budget_group = optimized_group['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
        optimized_group['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = optimized_group['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_budget_group * 100

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ GRP —Ç–∞ TRP
        optimized_group['GRP'] = optimized_group['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / optimized_group['–¶—ñ–Ω–∞']
        optimized_group['TRP'] = optimized_group['GRP'] * optimized_group['Affinity']
        
        all_results = pd.concat([all_results, optimized_group])
    
    return all_results.sort_values(['–°–•', '–ö–∞–Ω–∞–ª'])

def highlight_top_channels(row, top_channels):
    is_top_channel = row['–ö–∞–Ω–∞–ª'] in top_channels
    style = 'font-weight: bold; background-color: #f0f0f0' if is_top_channel else ''
    return [style] * len(row)

# --- Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
        if not validate_excel_file(df):
            st.stop()
        st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        st.stop()
    
    all_sh = df['–°–•'].unique()
    all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in df.columns if '–¶—ñ–Ω–∞_' in col]
    
    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
    buying_audiences = {}
    for sh in all_sh:
        ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
        buying_audiences[sh] = ba
    
    st.subheader("üìä –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ–∫")
    st.markdown("–ú–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —á–∞—Å—Ç–∫—É –±—é–¥–∂–µ—Ç—É (%) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É:")
    min_share = {}
    max_share = {}
    for channel in df['–ö–∞–Ω–∞–ª'].unique():
        col1, col2 = st.columns(2)
        with col1:
            min_val = st.number_input(f"Min % {channel}", min_value=0.0, max_value=100.0, value=0.0, step=1.0, key=f"min_{channel}")
            min_share[channel] = min_val
        with col2:
            max_val = st.number_input(f"Max % {channel}", min_value=0.0, max_value=100.0, value=100.0, step=1.0, key=f"max_{channel}")
            max_share[channel] = max_val
    
    # –¢–æ–ø-–∫–∞–Ω–∞–ª–∏
    top_channel_groups = {
        '–û—É—à–µ–Ω': ['–°–¢–ë', '–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2'],
        'Sirius': ['1+1 –£–∫—Ä–∞—ó–Ω–∞', '–¢–ï–¢', '2+2'],
        'Space': ['–ù–¢–ù']
    }
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
        all_results = run_multi_group_optimization(df.copy(), buying_audiences, top_channel_groups, min_share, max_share)
        all_top_channels = [channel for sublist in top_channel_groups.values() for channel in sublist]
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ –°–•")
        for sh in all_results['–°–•'].unique():
            st.markdown(f"##### –°–•: {sh}")
            sh_df = all_results[all_results['–°–•']==sh].copy()
            sh_df_sorted = sh_df.sort_values(by='–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)', ascending=False)
            sh_df_sorted['–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç'] = sh_df_sorted['TRP'] * sh_df_sorted['–¶—ñ–Ω–∞']
            
            st.dataframe(
                sh_df_sorted[['–ö–∞–Ω–∞–ª', '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', 'GRP', 'TRP', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)']]
                .style.apply(highlight_top_channels, axis=1, top_channels=all_top_channels)
            )

            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç:** `{sh_df_sorted['–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç:** `{sh_df_sorted['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –±—é–¥–∂–µ—Ç –¢–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤:** `{sh_df_sorted[sh_df_sorted['–ö–∞–Ω–∞–ª'].isin(all_top_channels)]['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
        
        st.subheader("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–ø–ª—ñ—Ç—ñ–≤")
        for sh in all_results['–°–•'].unique():
            sh_df = all_results[all_results['–°–•']==sh]
            fig, ax = plt.subplots(figsize=(10,5))
            colors = ['lightgreen' if c==sh_df['–¶—ñ–Ω–∞'].min() else 'salmon' if c==sh_df['–¶—ñ–Ω–∞'].max() else 'skyblue' for c in sh_df['–¶—ñ–Ω–∞']]
            ax.bar(sh_df['–ö–∞–Ω–∞–ª'], sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'], color=colors)
            ax.set_ylabel('–ß–∞—Å—Ç–∫–∞ (%)')
            ax.set_title(f"–°–•: {sh} ‚Äî –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
            ax.set_xticklabels(sh_df['–ö–∞–Ω–∞–ª'], rotation=45, ha='right')
            ax.grid(axis='y')
            st.pyplot(fig)
        
        # –ï–∫—Å–ø–æ—Ä—Ç Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            all_results.to_excel(writer, sheet_name='–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç', index=False)
        st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(),
                             file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
