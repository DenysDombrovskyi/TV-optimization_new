
import streamlit as st
import pandas as pd
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import io

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        standard_df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=1, engine="openpyxl")
        aff_df_raw = pd.read_excel(uploaded_file, sheet_name="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)", engine="openpyxl")

        header_row_index = None
        for i in range(len(aff_df_raw)):
            row_values = aff_df_raw.iloc[i].astype(str).str.strip().str.lower().tolist()
            if '–∫–∞–Ω–∞–ª' in row_values and 'aff' in row_values:
                header_row_index = i
                break

        if header_row_index is not None:
            aff_df = pd.read_excel(uploaded_file, sheet_name="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç–∞ (–≤–∏–∫–ª)", header=header_row_index, engine="openpyxl")
            aff_df.columns = aff_df.columns.str.strip().str.lower()
            if '–∫–∞–Ω–∞–ª' in aff_df.columns and 'aff' in aff_df.columns:
                aff_df = aff_df[['–∫–∞–Ω–∞–ª', 'aff']].copy()
                aff_df.columns = ['–ö–∞–Ω–∞–ª', 'Aff']
                st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            else:
                st.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–∫–∏ '–ö–∞–Ω–∞–ª' —Ç–∞ 'Aff' –ø—ñ—Å–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞–∑–≤.")
                st.stop()
        else:
            st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä—è–¥–æ–∫ –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏ '–ö–∞–Ω–∞–ª' —Ç–∞ 'Aff'. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞.")
            st.stop()

        all_data = pd.merge(standard_df, aff_df, on='–ö–∞–Ω–∞–ª')
        all_sh = all_data['–°–•'].unique()
        all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in all_data.columns if '–¶—ñ–Ω–∞_' in col]

        st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        total_budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç (–≥—Ä–Ω)", min_value=1000, value=500000, step=1000)
        goal = st.selectbox("–ú–µ—Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['Aff', 'TRP'])
        mode = st.selectbox("–†–µ–∂–∏–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", ['total', 'per_sh'])

        st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
        buying_audiences = {}
        for sh in all_sh:
            ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
            buying_audiences[sh] = ba

        missing_ba = [sh for sh in all_sh if buying_audiences.get(sh) is None]
        if missing_ba:
            st.error(f"‚ùå –ù–µ –æ–±—Ä–∞–Ω–æ –ë–ê –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –°–•: {', '.join(missing_ba)}")
            st.stop()

        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
            all_data['–¶—ñ–Ω–∞'] = all_data.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"])}', 0), axis=1)
            all_data['TRP'] = all_data.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"])}', 0), axis=1)
            all_results = pd.DataFrame()

            if mode == 'per_sh':
                total_standard_budget = (all_data['TRP'] * all_data['–¶—ñ–Ω–∞']).sum()
                for sales_house, group_df in all_data.groupby('–°–•'):
                    group_standard_budget = (group_df['TRP'] * group_df['–¶—ñ–Ω–∞']).sum()
                    group_budget = (group_standard_budget / total_standard_budget) * total_budget
                    group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = group_df['TRP'] * group_df['–¶—ñ–Ω–∞']
                    group_df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                    group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = group_df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'].apply(lambda x: 0.2 if x >= 10 else 0.3)
                    group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
                    group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
                    c = -group_df[goal].values
                    A_ub = [group_df['–¶—ñ–Ω–∞'].values]
                    b_ub = [group_budget]
                    A_lower = -pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['–¶—ñ–Ω–∞'], axis=0).values
                    b_lower = -group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values
                    A_upper = pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['–¶—ñ–Ω–∞'], axis=0).values
                    b_upper = group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values
                    A = [A_ub[0]] + list(A_lower) + list(A_upper)
                    b = b_ub + list(b_lower) + list(b_upper)
                    result = linprog(c, A_ub=A, b_ub=b, bounds=(0, None))
                    if result.success:
                        slots = result.x.round(0).astype(int)
                        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = slots * group_df['–¶—ñ–Ω–∞']
                        all_results = pd.concat([all_results, group_df])
            else:
                all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_data['TRP'] * all_data['–¶—ñ–Ω–∞']
                total_standard_budget = all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
                all_data['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_standard_budget) * 100
                all_data['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = all_data['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'].apply(lambda x: 0.2 if x >= 10 else 0.3)
                all_data['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - all_data['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
                all_data['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + all_data['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
                c = -all_data[goal].values
                A_ub = [all_data['–¶—ñ–Ω–∞'].values]
                b_ub = [total_budget]
                A_lower = -pd.get_dummies(all_data['–ö–∞–Ω–∞–ª']).mul(all_data['–¶—ñ–Ω–∞'], axis=0).values
                b_lower = -all_data['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values
                A_upper = pd.get_dummies(all_data['–ö–∞–Ω–∞–ª']).mul(all_data['–¶—ñ–Ω–∞'], axis=0).values
                b_upper = all_data['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values
                A = [A_ub[0]] + list(A_lower) + list(A_upper)
                b = b_ub + list(b_lower) + list(b_upper)
                result = linprog(c, A_ub=A, b_ub=b, bounds=(0, None))
                if result.success:
                    slots = result.x.round(0).astype(int)
                    all_data['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = slots
                    all_data['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = slots * all_data['–¶—ñ–Ω–∞']
                    all_results = all_data

            if not all_results.empty:
                total_trp = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP']).sum()
                all_results['TRP_–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π_—Å–ø–ª—ñ—Ç (%)'] = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP'] / total_trp) * 100
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
                st.dataframe(all_results[['–ö–∞–Ω–∞–ª', '–°–•', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', 'TRP_–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π_—Å–ø–ª—ñ—Ç (%)']])

                fig, axes = plt.subplots(1, 2, figsize=(18, 8))
                labels = all_results['–ö–∞–Ω–∞–ª']
                std_share = (all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / all_results['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                opt_share = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
                x = range(len(labels))
                width = 0.35
                axes[0].bar(x, std_share, width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç', color='gray')
                axes[0].bar([p + width for p in x], opt_share, width, label='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', color='skyblue')
                axes[0].set_title('–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)')
                axes[0].set_xticks([p + width / 2 for p in x])
                axes[0].set_xticklabels(labels, rotation=45, ha="right")
                axes[0].legend()
                axes[0].grid(axis='y')
                axes[1].bar(labels, all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'], color='skyblue')
                axes[1].set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤')
                axes[1].set_xticklabels(labels, rotation=45, ha="right")
                axes[1].grid(axis='y')
                st.pyplot(fig)

                output = io.BytesIO()
                all_results.to_excel(output, index=False, engine='openpyxl')
                st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(), file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {e}")
