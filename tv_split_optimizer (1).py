import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt

# --- –§—É–Ω–∫—Ü—ñ—ó ---

def validate_excel_file(df_standard):
    required_cols_standard = ['–ö–∞–Ω–∞–ª', '–°–•']
    for col in required_cols_standard:
        if col not in df_standard.columns:
            st.error(f"‚ùå –í –∞—Ä–∫—É—à—ñ '–°–ø-–≤–æ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∏–∫ '{col}'.")
            return False
    return True

def heuristic_split_within_group(group_df, total_group_budget):
    """–†–æ–∑–ø–æ–¥—ñ–ª—è—î –±—é–¥–∂–µ—Ç —É –≥—Ä—É–ø—ñ –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–æ—é (–≤–∞—Ä—Ç—ñ—Å—Ç—å —Ü—ñ–ª—å–æ–≤–æ–≥–æ TRP)."""
    if group_df.empty or total_group_budget == 0:
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = 0
        group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = 0
        return group_df
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ —Ü—ñ–ª—å–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    cost_per_buying_trp = np.divide(
        group_df['–¶—ñ–Ω–∞'], group_df['TRP'],
        out=np.full_like(group_df['TRP'].to_numpy(), np.inf, dtype=float),
        where=group_df['TRP'] != 0
    )
    cost_per_targeted_trp = cost_per_buying_trp * group_df['Affinity']

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –Ω–∞–π–¥–µ—à–µ–≤—à–æ–≥–æ –¥–æ –Ω–∞–π–¥–æ—Ä–æ–∂—á–æ–≥–æ
    sorted_indices = cost_per_targeted_trp.sort_values().index
    
    shares = pd.Series(0.0, index=group_df.index)
    remaining_budget = total_group_budget

    for idx in sorted_indices:
        row = group_df.loc[idx]
        cost = cost_per_targeted_trp.loc[idx]
        
        if pd.notna(cost) and cost != np.inf:
            budget_to_add = min(remaining_budget, row['–¶—ñ–Ω–∞'] * row['TRP'])
            shares.loc[idx] = budget_to_add
            remaining_budget -= budget_to_add
        
        if remaining_budget <= 0:
            break

    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = shares
    total_sx_budget = (group_df['–¶—ñ–Ω–∞'] * group_df['TRP']).sum()
    group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = (group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_sx_budget) * 100
    
    return group_df

def run_multi_group_optimization(df, buying_audiences, top_channel_groups):
    df['–¶—ñ–Ω–∞'] = df.apply(lambda row: row.get(f'–¶—ñ–Ω–∞_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['TRP'] = df.apply(lambda row: row.get(f'TRP_{buying_audiences.get(row["–°–•"], "")}', 0), axis=1)
    df['Affinity'] = df.apply(lambda row: row.get(f'Affinity_{buying_audiences.get(row["–°–•"], "")}', 1.0), axis=1).fillna(1.0)
    
    all_results = pd.DataFrame()

    for sh, group_df in df.groupby('–°–•'):
        optimized_group = pd.DataFrame()
        
        # 1. –ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –ø–æ –°–•
        total_sx_budget = (group_df['–¶—ñ–Ω–∞'] * group_df['TRP']).sum()
        remaining_df = group_df.copy()
        
        # 2. –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ –¢–æ–ø-–≥—Ä—É–ø–∞—Ö
        all_top_channels = [channel for sublist in top_channel_groups.values() for channel in sublist]
        remaining_df_for_opt = remaining_df.copy()

        for group_name, channels_list in top_channel_groups.items():
            df_group = remaining_df[remaining_df['–ö–∞–Ω–∞–ª'].isin(channels_list)].copy()
            if not df_group.empty:
                total_group_budget = (df_group['–¶—ñ–Ω–∞'] * df_group['TRP']).sum()
                results_group = heuristic_split_within_group(df_group, total_group_budget)
                optimized_group = pd.concat([optimized_group, results_group])
                remaining_df_for_opt = remaining_df_for_opt[~remaining_df_for_opt['–ö–∞–Ω–∞–ª'].isin(channels_list)]

        # 3. –†–µ—à—Ç–∞ –∫–∞–Ω–∞–ª—ñ–≤
        if not remaining_df_for_opt.empty:
            total_remaining_budget = (remaining_df_for_opt['–¶—ñ–Ω–∞'] * remaining_df_for_opt['TRP']).sum()
            results_remaining = heuristic_split_within_group(remaining_df_for_opt, total_remaining_budget)
            optimized_group = pd.concat([optimized_group, results_remaining])
        
        # 4. –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Å—Ç–æ–∫
        optimized_group['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = (optimized_group['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_sx_budget) * 100
        all_results = pd.concat([all_results, optimized_group])
    
    all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'] = all_results.groupby('–°–•')['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'].transform(
        lambda x: x / x.sum() * 100
    )
    
    return all_results.sort_values(['–°–•', '–ö–∞–Ω–∞–ª'])

def highlight_cost(val, costs):
    if val == costs.min():
        return 'background-color: lightgreen'
    elif val == costs.max():
        return 'background-color: salmon'
    else:
        return ''

def highlight_top_channels(row, top_channels):
    """–í–∏–¥—ñ–ª—è—î –¢–æ–ø-–∫–∞–Ω–∞–ª–∏ —Å—ñ—Ä–æ—é –∑–∞–ª–∏–≤–∫–æ—é."""
    is_top_channel = row['–ö–∞–Ω–∞–ª'] in top_channels
    style = 'font-weight: bold; background-color: #f0f0f0' if is_top_channel else ''
    return [style] * len(row)

# --- Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

st.set_page_config(page_title="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞", layout="wide")
st.title("üì∫ –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¢–í —Å–ø–ª—ñ—Ç–∞ | Dentsu X")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, sheet_name="–°–ø-–≤–æ", skiprows=2, engine="openpyxl")
        if not validate_excel_file(df):
            st.stop()
        st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        st.stop()
    
    all_sh = df['–°–•'].unique()
    all_ba = [col.replace('–¶—ñ–Ω–∞_', '') for col in df.columns if '–¶—ñ–Ω–∞_' in col]
    
    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    st.subheader("üéØ –í–∏–±—ñ—Ä –ë–ê –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•")
    buying_audiences = {}
    for sh in all_sh:
        ba = st.selectbox(f"–°–•: {sh}", all_ba, key=sh)
        buying_audiences[sh] = ba
    
    st.subheader("üìä –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤")
    top_channel_groups = {
        '–û—É—à–µ–Ω': ['–°–¢–ë', '–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª', 'ICTV2'],
        'Sirius': ['1+1 –£–∫—Ä–∞—ó–Ω–∞', '–¢–ï–¢', '2+2'],
        'Space': ['–ù–¢–ù']
    }
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"):
        all_results = run_multi_group_optimization(df.copy(), buying_audiences, top_channel_groups)
        all_top_channels = [channel for sublist in top_channel_groups.values() for channel in sublist]
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ –°–•")
        for sh in all_results['–°–•'].unique():
            st.markdown(f"##### –°–•: {sh}")
            sh_df = all_results[all_results['–°–•']==sh].copy()
            sh_df['–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç'] = sh_df['TRP'] * sh_df['–¶—ñ–Ω–∞']
            sh_df['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π'] = np.divide(
                sh_df['–¶—ñ–Ω–∞'], sh_df['TRP'],
                out=np.full_like(sh_df['TRP'].to_numpy(), np.inf, dtype=float),
                where=sh_df['TRP']!=0
            ) * sh_df['Affinity']
            sh_df_sorted = sh_df.sort_values(by='–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)', ascending=False)
            
            st.dataframe(
                sh_df_sorted[['–ö–∞–Ω–∞–ª', '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', '–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)']]
                .style.apply(highlight_top_channels, axis=1, top_channels=all_top_channels)
                .applymap(lambda v: highlight_cost(v, sh_df_sorted['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π']), subset=['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π'])
            )

            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç:** `{sh_df_sorted['–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç:** `{sh_df_sorted['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
            st.markdown(f"**–°—É–º–∞—Ä–Ω–∏–π –±—é–¥–∂–µ—Ç –¢–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤:** `{sh_df_sorted[sh_df_sorted['–ö–∞–Ω–∞–ª'].isin(all_top_channels)]['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum():,.2f}`")
        
        st.subheader("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–ø–ª—ñ—Ç—ñ–≤")
        for sh in all_results['–°–•'].unique():
            sh_df = all_results[all_results['–°–•']==sh]
            sh_df['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π'] = np.divide(
                sh_df['–¶—ñ–Ω–∞'], sh_df['TRP'],
                out=np.full_like(sh_df['TRP'].to_numpy(), np.inf, dtype=float),
                where=sh_df['TRP']!=0
            ) * sh_df['Affinity']

            fig, ax = plt.subplots(figsize=(10,5))
            colors = ['lightgreen' if c==sh_df['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π'].min() else 'salmon' if c==sh_df['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π'].max() else 'skyblue' for c in sh_df['–¶—ñ–Ω–∞_–¢–†–ü_—Ü—ñ–ª—å–æ–≤–∏–π']]
            ax.bar(sh_df['–ö–∞–Ω–∞–ª'], sh_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)'], color=colors)
            ax.set_ylabel('–ß–∞—Å—Ç–∫–∞ (%)')
            ax.set_title(f"–°–•: {sh} ‚Äî –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
            ax.set_xticklabels(sh_df['–ö–∞–Ω–∞–ª'], rotation=45, ha='right')
            ax.grid(axis='y')
            st.pyplot(fig)
        
        # --- –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ –¢–æ–ø-–∫–∞–Ω–∞–ª–∞—Ö ---
        top_share_summary = (
            all_results[all_results['–ö–∞–Ω–∞–ª'].isin(all_top_channels)]
            .groupby('–°–•')['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)']
            .sum()
            .reset_index()
            .rename(columns={'–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ (%)': '–°—É–º–∞—Ä–Ω–∞ —á–∞—Å—Ç–∫–∞ –¢–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤ (%)'})
        )
        top_channels_per_sh = (
            all_results[all_results['–ö–∞–Ω–∞–ª'].isin(all_top_channels)]
            .groupby('–°–•')['–ö–∞–Ω–∞–ª']
            .apply(lambda x: ', '.join(sorted(x.unique())))
            .reset_index()
            .rename(columns={'–ö–∞–Ω–∞–ª': '–¢–æ–ø-–∫–∞–Ω–∞–ª–∏'})
        )
        top_summary = pd.merge(top_share_summary, top_channels_per_sh, on="–°–•")

        st.subheader("üìå –°—É–º–∞—Ä–Ω—ñ —á–∞—Å—Ç–∫–∏ –¢–æ–ø-–∫–∞–Ω–∞–ª—ñ–≤ –ø–æ –°–•")
        st.dataframe(top_summary)

        # --- –ï–∫—Å–ø–æ—Ä—Ç —É Excel ---
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            all_results.to_excel(writer, sheet_name='–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç', index=False)
            top_summary.to_excel(writer, sheet_name='–°—É–º–∞—Ä–Ω—ñ –¢–æ–ø-—á–∞—Å—Ç–∫–∏', index=False)
        st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Excel", data=output.getvalue(),
                             file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.xlsx")
